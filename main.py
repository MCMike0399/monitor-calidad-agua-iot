"""
Servidor Principal - Monitor de Calidad de Agua en Tiempo Real
==============================================================

Este es el punto de entrada principal para nuestro sistema de monitoreo de agua.
Demuestra conceptos clave de:
- Sistemas distribuidos (Arduino + Servidor + Cliente Web)
- WebSockets para comunicaci√≥n bidireccional en tiempo real
- HTTP REST API para dispositivos IoT con limitaciones
- Containerizaci√≥n con Docker
- Middleware para logging y manejo de errores
"""

import uuid
import time
import os
import uvicorn
import asyncio
from datetime import datetime
from fastapi import FastAPI, HTTPException, Request, WebSocketDisconnect
from fastapi.responses import JSONResponse, HTMLResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from logging_config import get_logger, setup_logging
from dotenv import load_dotenv
from water_monitor import register_routes

# ============================================================================
# CONFIGURACI√ìN INICIAL Y LOGGING
# ============================================================================

# Cargar variables de entorno desde archivo .env
load_dotenv()

# Configurar sistema de logging para toda la aplicaci√≥n
setup_logging()
logger = get_logger(__name__)

# ============================================================================
# CREACI√ìN DE LA APLICACI√ìN FASTAPI
# ============================================================================

# Crear instancia principal de FastAPI con metadatos de documentaci√≥n
app = FastAPI(
    title="üåä Monitor de Calidad de Agua IoT",
    description="""
    Sistema de monitoreo en tiempo real para calidad de agua usando:
    
    üîß **Hardware**: Arduino Uno R4 WiFi con sensores ADC
    üì° **Comunicaci√≥n**: HTTP POST + WebSockets
    üê≥ **Despliegue**: Docker + AWS
    üìä **Frontend**: HTML5 + JavaScript + Plotly.js
    
    **Endpoints principales:**
    - `/water-monitor` - Interfaz web de monitoreo
    - `/admin-dashboard` - Panel de administraci√≥n del servidor
    - `/docs` - Documentaci√≥n autom√°tica de la API
    """,
    version="2.0.0",
    docs_url="/docs",           # Swagger UI autom√°tico
    redoc_url="/redoc",         # ReDoc UI alternativo
    openapi_url="/openapi.json", # Esquema OpenAPI
)

# ============================================================================
# CONFIGURACI√ìN DE MIDDLEWARE
# ============================================================================

# Middleware CORS - Permite solicitudes desde diferentes dominios
# Importante para desarrollo local y despliegue en producci√≥n
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especifica dominios exactos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware personalizado para logging de requests
# Esto nos permite monitorear toda la actividad del servidor
@app.middleware("http")
async def log_requests_middleware(request: Request, call_next):
    """
    Middleware de Logging para Monitoreo de Requests
    ===============================================
    
    Este middleware demuestra c√≥mo interceptar y monitorear TODAS las 
    peticiones HTTP que llegan al servidor. √ötil para:
    - Debugging en desarrollo
    - An√°lisis de performance
    - Auditor√≠a de seguridad
    - Monitoreo en producci√≥n
    
    Args:
        request: Objeto Request de FastAPI con toda la info de la petici√≥n
        call_next: Funci√≥n para continuar al siguiente middleware/handler
    
    Returns:
        Response object con headers adicionales de monitoreo
    """
    # Generar ID √∫nico para rastrear cada petici√≥n
    request_id = str(uuid.uuid4())[:8]  # Solo primeros 8 caracteres
    start_time = time.time()
    
    # Log de la petici√≥n entrante
    logger.info(
        f"üîÑ [{request_id}] Petici√≥n entrante: "
        f"{request.method} {request.url.path} "
        f"desde {request.client.host if request.client else 'Unknown'}"
    )
    
    try:
        # Ejecutar la petici√≥n y medir tiempo de respuesta
        response = await call_next(request)
        process_time = time.time() - start_time
        
        # Determinar emoji seg√∫n el status code
        status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
        
        # Log de la respuesta
        logger.info(
            f"{status_emoji} [{request_id}] Respuesta: "
            f"Status {response.status_code} "
            f"({process_time:.3f}s)"
        )
        
        # Agregar headers de debugging (√∫til para desarrollo)
        response.headers["X-Request-ID"] = request_id
        response.headers["X-Process-Time"] = str(process_time)
        
        return response
        
    except Exception as e:
        # Log de errores no manejados
        logger.error(f"üí• [{request_id}] Error no manejado: {str(e)}")
        raise  # Re-lanzar la excepci√≥n para que FastAPI la maneje

# ============================================================================
# MANEJADORES DE ERRORES GLOBALES
# ============================================================================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """
    Manejador Global de Excepciones HTTP
    ===================================
    
    Centraliza el manejo de errores HTTP para:
    - Consistencia en respuestas de error
    - Logging autom√°tico de errores
    - Formato est√°ndar para el frontend
    
    Args:
        request: Request que caus√≥ el error
        exc: HTTPException con detalles del error
    
    Returns:
        JSONResponse con formato est√°ndar de error
    """
    logger.warning(
        f"üö® HTTP Error {exc.status_code}: {exc.detail} "
        f"en {request.method} {request.url.path}"
    )
    
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": True,
            "status_code": exc.status_code,
            "message": exc.detail,
            "timestamp": datetime.now().isoformat(),
            "path": str(request.url.path)
        }
    )

@app.exception_handler(WebSocketDisconnect)
async def websocket_disconnect_handler(request: Request, exc: WebSocketDisconnect):
    """
    Manejador de Desconexiones WebSocket
    ===================================
    
    Maneja desconexiones inesperadas de WebSockets.
    √ötil para cleanup y logging de conexiones perdidas.
    """
    logger.info(f"üîå WebSocket desconectado: {exc.code}")

# ============================================================================
# RUTAS B√ÅSICAS DEL SERVIDOR
# ============================================================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """
    P√°gina de Inicio del Sistema
    ============================
    
    Punto de entrada principal que muestra informaci√≥n del sistema
    y enlaces a las diferentes interfaces disponibles.
    """
    logger.info("üìç Acceso a p√°gina principal")
    
    # Cargar p√°gina principal desde archivo
    html_path = os.path.join("static", "index.html")
    if os.path.exists(html_path):
        return FileResponse(html_path)
    else:
        # Fallback si no existe el archivo
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html><head><title>Monitor IoT</title></head>
        <body><h1>üåä Monitor de Calidad de Agua IoT</h1>
        <p>‚ö†Ô∏è Archivo de p√°gina principal no encontrado</p>
        <a href="/water-monitor">üìä Monitor de Agua</a> | 
        <a href="/admin-dashboard">‚öôÔ∏è Dashboard Admin</a>
        </body></html>
        """, status_code=200)

@app.get("/health")
async def health_check():
    """
    Health Check Endpoint
    ====================
    
    Endpoint est√°ndar para verificar el estado del servidor.
    Usado por:
    - Docker HEALTHCHECK
    - Load balancers
    - Monitoreo autom√°tico
    - CI/CD pipelines
    
    Returns:
        dict: Estado actual del servidor con m√©tricas b√°sicas
    """
    current_time = datetime.now()
    logger.debug("üè• Health check ejecutado")
    
    return {
        "status": "healthy",
        "timestamp": current_time.isoformat(),
        "uptime": "Calculando...",  # En producci√≥n, calcular uptime real
        "version": "2.0.0",
        "environment": os.getenv("ENVIRONMENT", "development"),
        "websockets": "active",
        "database": "not_connected"  # Expandir cuando agregues BD
    }

# ============================================================================
# REGISTRO DE RUTAS DE MONITOREO
# ============================================================================

# Registrar todas las rutas relacionadas con el monitoreo de agua
# Esto incluye WebSockets, API REST, y p√°ginas web
register_routes(app)

# Integrar el monitor de sistema distribuido (funcionalidad educativa avanzada)
# Esto proporciona visualizaci√≥n en tiempo real de:
# - M√©tricas de sistema (CPU, memoria, red)
# - Eventos de comunicaci√≥n entre componentes
# - Logs estructurados para debugging
# - Topolog√≠a de red del sistema distribuido
try:
    from system_monitor import integrate_system_monitor
    integrate_system_monitor(app)
    logger.info("üîç Monitor de sistema distribuido integrado exitosamente")
except ImportError:
    logger.warning("‚ö†Ô∏è Monitor de sistema no disponible (instalar psutil para habilitarlo)")
except Exception as e:
    logger.error(f"üí• Error integrando monitor de sistema: {str(e)}")

# ============================================================================
# EVENTOS DEL CICLO DE VIDA DE LA APLICACI√ìN
# ============================================================================

@app.on_event("startup")
async def startup_event():
    """
    Evento de Inicio de la Aplicaci√≥n
    =================================
    
    Se ejecuta cuando el servidor inicia. √ötil para:
    - Inicializar conexiones a base de datos
    - Configurar tareas en background
    - Validar configuraciones
    - Establecer estado inicial
    """
    logger.info("üöÄ Iniciando servidor de Monitor de Agua IoT...")
    logger.info("=" * 60)
    logger.info("üìã Sistema de Monitoreo de Calidad de Agua")
    logger.info("üèóÔ∏è  Arquitectura: Arduino + FastAPI + WebSockets")
    logger.info("üê≥ Contenedor: Docker")
    logger.info("‚òÅÔ∏è  Despliegue: AWS")
    logger.info("=" * 60)
    
    # Aqu√≠ podr√≠as inicializar conexiones a BD, caches, etc.
    # await database.connect()
    # await redis.connect()

@app.on_event("shutdown")
async def shutdown_event():
    """
    Evento de Cierre de la Aplicaci√≥n
    =================================
    
    Se ejecuta cuando el servidor se cierra. √ötil para:
    - Cerrar conexiones a base de datos
    - Guardar estado persistente
    - Cancelar tareas en background
    - Cleanup de recursos
    """
    logger.info("üõë Cerrando servidor de Monitor de Agua IoT...")
    logger.info("‚úÖ Cleanup completado")
    
    # Aqu√≠ podr√≠as cerrar conexiones y hacer cleanup
    # await database.disconnect()
    # await redis.disconnect()

# ============================================================================
# FUNCI√ìN PRINCIPAL - PUNTO DE ENTRADA
# ============================================================================

if __name__ == "__main__":
    """
    Punto de Entrada Principal
    =========================
    
    Se ejecuta solo cuando el archivo se ejecuta directamente
    (no cuando se importa como m√≥dulo).
    
    En producci√≥n, se usa t√≠picamente:
    uvicorn main:app --host 0.0.0.0 --port 8000
    """
    
    # Obtener configuraci√≥n del entorno
    port = int(os.getenv("PORT", 8000))
    host = os.getenv("HOST", "0.0.0.0")
    debug_mode = os.getenv("DEBUG", "True").lower() == "true"
    
    logger.info(f"üåê Iniciando servidor en {host}:{port}")
    logger.info(f"üîß Modo debug: {debug_mode}")
    logger.info(f"üìÇ Directorio de trabajo: {os.getcwd()}")
    
    # Iniciar servidor Uvicorn
    # IMPORTANTE: reload=False para evitar el error de pathlib en Python 3.12
    uvicorn.run(
        "main:app", 
        host=host, 
        port=port, 
        reload=False,  # Desactivado para Python 3.12 compatibility
        log_level="info" if not debug_mode else "debug"
    )